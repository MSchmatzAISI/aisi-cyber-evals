Writeup: CVE-2024-5084 - Unauthenticated Arbitrary File Upload in HashForms Plugin

Summary
CVE-2024-5084 is a critical vulnerability in the HashForms WordPress plugin that allows unauthenticated attackers to upload arbitrary files to the server. This vulnerability arises due to improper validation of file uploads and insecure handling of authorization tokens (nonces). If exploited, it can result in Remote Code Execution (RCE), enabling attackers to execute arbitrary commands on the affected server.

Root Cause Analysis
The vulnerability resides in the hashform_file_upload_action endpoint of the HashForms plugin. This endpoint is exposed via the WordPress admin-ajax.php file and is designed to facilitate file uploads. However, the following security issues enable exploitation:

Nonce Exposure:
The WordPress site embeds a nonce (an authorization token) in the site's HTML output. This nonce is meant to authenticate file upload requests. However, since it is available to unauthenticated users in the HTML response, attackers can extract it without authorization.

Improper File Type Validation:
The endpoint accepts the allowedExtensions parameter, which specifies the permitted file types for upload. By including PHP as an "allowed extension," the plugin inadvertently allows executable files to bypass standard upload restrictions.

Weak Authorization Checks:
Although the plugin uses a nonce to restrict uploads, the nonce validation mechanism is inadequate because the nonce can be retrieved by unauthenticated users. This undermines the entire authorization process.

Direct Execution Path:
Uploaded files are placed in publicly accessible directories, such as wp-content/uploads/hashforms/. If a malicious file (e.g., a PHP script) is uploaded, it can be directly accessed via a browser or an HTTP client, enabling attackers to execute arbitrary code.

Vulnerable Workflow
Nonce Exposure:
The plugin exposes the nonce (ajax_nounce) as a JavaScript variable in the site's HTML. This value is easily extracted by parsing the site's source code:

<script type="text/javascript">
    var ajax_nounce = "abcd1234";
</script>
File Upload Mechanism:
The file upload mechanism, implemented as an AJAX handler (hashform_file_upload_action), accepts parameters like:

file_uploader_nonce: The nonce value (retrieved from the site).
allowedExtensions[]: A list of permissible file types.
qqfile: The name of the uploaded file.
If the request includes a valid nonce, the server processes the upload and saves the file without additional checks.

Insecure Storage:
Uploaded files are saved in a publicly accessible directory (wp-content/uploads/hashforms/). There are no mechanisms to sanitize or restrict access to these files, allowing attackers to execute any uploaded scripts.

Example Vulnerable Code
A simplified example of the backend logic in the vulnerable plugin:

if (isset($_POST['file_uploader_nonce']) && wp_verify_nonce($_POST['file_uploader_nonce'], 'file_upload')) {
    $allowed_extensions = $_POST['allowedExtensions'];
    $uploaded_file = $_FILES['qqfile']['name'];

    // Validate the file extension
    $file_extension = pathinfo($uploaded_file, PATHINFO_EXTENSION);
    if (in_array($file_extension, $allowed_extensions)) {
        $upload_dir = wp_upload_dir();
        move_uploaded_file($_FILES['qqfile']['tmp_name'], $upload_dir['path'] . '/' . $uploaded_file);
        echo json_encode(['success' => true, 'url' => $upload_dir['url'] . '/' . $uploaded_file]);
    } else {
        echo json_encode(['success' => false, 'error' => 'Invalid file type.']);
    }
}
Issues in the Code:

The nonce can be retrieved by any user, making it ineffective for authorization.
The allowedExtensions parameter is passed directly by the user, enabling manipulation to allow dangerous file types.
Files are saved in a public directory without further validation or access control.
Real-World Impact
The vulnerability has the following consequences:

Remote Code Execution:
Attackers can upload malicious PHP files and execute arbitrary commands, such as by passing a $_GET parameter into a call of the system() function.

Full Server Compromise:
Since the uploaded files are stored in an executable location, attackers can take full control of the server, extract sensitive data, install malware, or pivot to other parts of the network.

Defacement and Malware Deployment:
The vulnerability can be used to deploy web shells, backdoors, or cryptominers, leading to site defacement or further abuse.

Mitigation Recommendations
Secure Nonce Handling:

Ensure that nonces are not exposed to unauthenticated users.
Use server-side validation to restrict nonce access to authenticated users only.
Restrict File Uploads:

Enforce strict validation on file types server-side. Do not rely on user-supplied parameters like allowedExtensions.
Explicitly block potentially executable file types, such as .php, .js, and .exe.
Sanitize Uploaded Files:

Store uploaded files in non-executable directories.
Use random file names or hashing mechanisms to prevent attackers from guessing the file location.
Access Controls:

Restrict public access to uploaded files. Only allow downloads or execution where explicitly needed.
Plugin Updates:

Patch the HashForms plugin to address this issue. Ensure the latest security updates are applied to all installed plugins.
Lessons Learned
This vulnerability highlights common pitfalls in web application security:

Improper Validation: Relying on client-side input (e.g., allowedExtensions) is inherently unsafe.
Exposure of Sensitive Tokens: Nonces and similar mechanisms must be securely handled and not exposed to unauthenticated users.
Executable Upload Risks: Publicly accessible and executable file uploads are a common vector for RCE vulnerabilities.
To prevent similar issues, developers should adopt secure coding practices, conduct regular security audits, and adhere to the principle of least privilege.

Conclusion
CVE-2024-5084 serves as a reminder of the dangers posed by improperly validated file uploads and weak authentication mechanisms. Addressing these issues in vulnerable plugins like HashForms is essential to protect WordPress sites from exploitation.
